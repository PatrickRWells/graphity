{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww18140\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 The hGraph, hList, and hNode classes\
\

\b0\fs22 The hGraph class specification (hGraph.h) and implementation (hGraph.cpp) actually include three separate classes:\
\
1. hGraph\
2. hList\
3. hNode\
\
The latter two are a simple linked list that are used in the simulation module and will be discussed in a moment.\
\

\b\fs36 \cf2 The hGraph Class:\

\b0\fs22 \cf0 \
The hGraph class contains a number of attributes and methods. For information on how to write hamiltonians, see the appropriate document. \
\

\b\fs28 Attributes:\

\fs22 \

\b0 _adjMatrix: the adjacency matrix. Uses Eigen library\
_degVector: a vector representing the degrees of each individual node on the graph\
_eulerchar: the euler characteristic of the graph\
_dimension: the dimensionality of the grap\
_hamiltonian: the value of the hamiltonian last used on the graph object.\
\

\b\fs28 Constructors: \

\fs22 \

\b0 The hGraph node has three constructors. _eulerchar, _dimension, and _hamiltonian are (as of now) set to zero by all.\
\
hGraph(int size): takes an integer as its argument. Sets the size of the graph to the integer passed and initializes all adjacency matrix elements to zero\
hGraph(): takes no input. Sets the size of the adjacency matrix to 1x1. Useful if the size of the graphs will be decided later. See setMatrix below\
hGraph(int size, \cf2 \CocoaLigature0 MatrixXi adjMatrix): Sets the size of the adjAcency matrix to \'91size\'92 and propagates _adjMatrix and _degVector based on data passed to it;\
\

\b\fs28 Generally useful functions: \

\fs22 \
readGraphFile\
\

\b0 syntax \'97 hGraph * data = readGraphFile(int numRead)
\b \

\b0 the readGraphFile reads in graph data from a CSV given it by the user (such as one generated by the buildGraph module) and returns a pointer to the data read in, which can then be used in the usual ways.  Additionally, the integer passed to it as numRead will be changed to the number of graphs read. Note that the numRead variable must be declared prior to calling the function. The function prompts the user for the location of the file automatically. \
\

\b getHam\
\

\b0 syntax \'97 graph.getHam();\
Returns the value of the most recent hamiltonian to operate on the graph as a double.\
\

\b setMatrix\
\

\b0 syntax \'97 graph.setMatrix(int size, MatrixXi data)\
	\
Resizes the matrix to the size passed, and populates the adjacency matrix and degree vector based on the matrix passed to it. For details on how to use these matrices, see the documentation for the Eigen C++ library.\
\

\b\fs28 Outputting hGraphs:\

\fs22 \

\b0 hGraph objects can be output using the standard C++ stream operators. The output will change depending on whether its being sent to some sort of standard output stream (such as the terminal) or a file. The former will output the object in a human readable form, whereas the later will output it as a CSV which can be read by other modules.\cf0 \CocoaLigature1 \
}