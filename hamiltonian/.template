#ifndef template_h
#define template_h

#include "absHamiltonian.h"
#include <cmath>

void TemplateHam(hGraph &host);
class Template : public absHamiltonian {
    
private:
    double _result; //Use this attribute to store the result of full energy calculations.
    double _partial;//Use this attribute to store the result of partial energy calculations.
    std::vector<int> nodeA;
    std::vector<int> nodeB;
    int numEdges = 0;
    double sourceT = 0;
    bool isPartial = false;
public:
    Template();
    Template(std::vector<int> node1, std::vector<int> node2);
    double result();
    void calculate(hGraph &host); //Don't mess with these
    double getDifference() {
        return _partial;
    }
    
};

Template::Template() : _result(0.0) { //unlikely that it should be changed, unless you have some background energy level
    sourceT = SOURCE;
}

Template::Template(std::vector<int> node1, std::vector<int> node2) : _result(0.0) { //This constructor is used by the utility function when doing only a partial calculation.
    nodeA = node1;
    nodeB = node2;
    numEdges = node1.size();
    isPartial = true;
    
}


double Template::result() { //There should be no reason to edit this function;
    return _result;
}

void Template::calculate(hGraph &host) { //This is where all the main calculation takes place.

    
}

void TemplateHam(hGraph &host) {
                                
    Template Ham;
    host.accept(Ham);
    host.setHamiltonian(Ham.result());
    
}
double TemplatePartial(hGraph &host, std::vector<int> nodeA, std::vector<int> nodeB) { 
    if(nodeA.size() != nodeB.size()) {
        std::cout << "Fatal error: vectors passed to a partial hamiltonian must contain the same number of elements" << std::endl;
        exit(2);
    }
    Template Ham(nodeA, nodeB);
    host.accept(Ham);
    return Ham.getDifference();
    
    
}

#endif /* basic2_h */